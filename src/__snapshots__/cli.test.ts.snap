// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli module call with arguments: ['--list', '--private'] 1`] = `
[
  [
    "ts-print-tree/
  - src/
    - cli.ts
      - private const args: string[]
      - private const defaultIgnore: (string | RegExp)[]
      - private function printHelp(): void
      - private function printVersion(): void
      - const pathFilter: (ignorePatterns: (string | RegExp)[]) => (path: string) => boolean
      - private function formatNodeName(node: TreeNode): string
      - function formatAsTree(node: TreeNode, prefix?: string, isLast?: boolean, isRoot?: boolean): string
      - function formatAsList(node: TreeNode, depth?: number): string
    - index.ts
      - private const TS_FILE_MATCH: RegExp
      - interface TreeNode
      - private function readTsConfig(rootDir: string): ParsedCommandLine
      - private function createProgram(rootDir: string): Program
      - private function analyzeFile(sourceFile: SourceFile, typeChecker: TypeChecker, visibilityLevel: VisibilityLevel): TreeNode[]
      - private function traverseDirectory(dir: string, program: Program, pathFilter: (path: string) => boolean, visibilityLevel: VisibilityLevel): TreeNode
      - function tree(rootDir?: string, pathFilter?: (path: string) => boolean, visibilityLevel?: VisibilityLevel): TreeNode
    - tests/
      - class.ts
        - private const tree: "ðŸŒ³"
        - class DefaultClass
          - property static foo: string
          - property bar: string[]
          - method constructor(baz: number[]): DefaultClass
        - class NamedClass extends DefaultClass
          - private property static version: number
          - method get version(): number
          - method constructor(): NamedClass
          - method double(): void
          - private method triple(): void
          - protected method quadruple(): void
          - method octuple(): void
        - const DefaultClass: typeof DefaultClass
      - consts.ts
        - private const privateString: string
        - private const privateNumber: number
        - private const privateBoolean: boolean
        - const publicArray: string[]
        - interface PublicInterface
        - private const privateFunction: (input: string) => string
        - const publicFunction: (input: number) => string
      - default-const.ts
        - const default: "ðŸŒ³"
      - default-function.ts
        - function <anonymous>(a: number, b: number): string
",
  ],
]
`;

exports[`cli module call with no arguments 1`] = `
[
  [
    "ts-print-tree/
â””â”€â”€ src/
    â”œâ”€â”€ cli.ts
    â”‚   â”œâ”€â”€ const pathFilter: (ignorePatterns: (string | RegExp)[]) => (path: string) => boolean
    â”‚   â”œâ”€â”€ function formatAsTree(node: TreeNode, prefix?: string, isLast?: boolean, isRoot?: boolean): string
    â”‚   â””â”€â”€ function formatAsList(node: TreeNode, depth?: number): string
    â”œâ”€â”€ index.ts
    â”‚   â”œâ”€â”€ interface TreeNode
    â”‚   â””â”€â”€ function tree(rootDir?: string, pathFilter?: (path: string) => boolean, visibilityLevel?: VisibilityLevel): TreeNode
    â””â”€â”€ tests/
        â”œâ”€â”€ class.ts
        â”‚   â”œâ”€â”€ class DefaultClass
        â”‚   â”‚   â”œâ”€â”€ property static foo: string
        â”‚   â”‚   â”œâ”€â”€ property bar: string[]
        â”‚   â”‚   â””â”€â”€ method constructor(baz: number[]): DefaultClass
        â”‚   â”œâ”€â”€ class NamedClass extends DefaultClass
        â”‚   â”‚   â”œâ”€â”€ method get version(): number
        â”‚   â”‚   â”œâ”€â”€ method constructor(): NamedClass
        â”‚   â”‚   â”œâ”€â”€ method double(): void
        â”‚   â”‚   â””â”€â”€ method octuple(): void
        â”‚   â””â”€â”€ const DefaultClass: typeof DefaultClass
        â”œâ”€â”€ consts.ts
        â”‚   â”œâ”€â”€ const publicArray: string[]
        â”‚   â”œâ”€â”€ interface PublicInterface
        â”‚   â””â”€â”€ const publicFunction: (input: number) => string
        â”œâ”€â”€ default-const.ts
        â”‚   â””â”€â”€ const default: "ðŸŒ³"
        â””â”€â”€ default-function.ts
            â””â”€â”€ function <anonymous>(a: number, b: number): string
",
  ],
]
`;
